from django.shortcuts import render
from .models import Prediction
from .forecasting.predictions import save_predictions
from .models import ExchangeRate
from rates.models import ExchangeRateNormalized
from datetime import datetime, timedelta
import plotly.graph_objs as go
import base64
import io
import urllib
import json
import pandas as pd
import decimal
from decimal import Decimal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Decimal
from .models import Prediction

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
from .forecasting.lstm_model import predict_future as predict_lstm
from .forecasting.linear_regression_model import predict_linear_regression
from .forecasting.predictions import save_predictions
# –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
MODEL_FUNCTIONS = {
    'lstm': predict_lstm,
    'linear_regression': predict_linear_regression,
    # 'prophet': predict_prophet,  # –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
}


def home(request):
    return render(request, 'home.html')  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É

def graph_view(request):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
    start_date = request.GET.get('start_date', '2024-01-01')
    end_date = request.GET.get('end_date', '2024-12-31')
    currency = request.GET.get('currency', 'USD').upper()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã
    try:
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")
    except ValueError:
        start_date = datetime(2024, 1, 1)
        end_date = datetime(2024, 12, 31)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    data = ExchangeRate.objects.filter(date__range=[start_date, end_date]).order_by('date')

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    dates = [item.date.strftime('%Y-%m-%d') for item in data]
    values = [float(getattr(item, currency)) for item in data if getattr(item, currency) is not None]

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if values:
        min_value = min(values)
        max_value = max(values)
        avg_value = round(sum(values) / len(values), 4)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 4 –∑–Ω–∞–∫–æ–≤
        min_date = dates[values.index(min_value)]
        max_date = dates[values.index(max_value)]
    else:
        min_value = max_value = avg_value = min_date = max_date = "Nie s√∫ dostupn√© √∫daje"

    # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Min: {min_value} ({min_date}), Max: {max_value} ({max_date}), Avg: {avg_value}")

    context = {
        "dates": json.dumps(dates),
        "values": json.dumps(values),
        "currency": currency,
        "start_date": start_date.strftime('%Y-%m-%d'),
        "end_date": end_date.strftime('%Y-%m-%d'),
        "min_value": min_value,
        "min_date": min_date,
        "max_value": max_value,
        "max_date": max_date,
        "avg_value": avg_value,
    }

    return render(request, "graph.html", context)


"""
def predictions_view(request):
    currency = request.GET.get('currency', 'USD')  # –í—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ —Ñ–æ—Ä–º—ã
    model = request.GET.get('model', 'lstm')  # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    days = int(request.GET.get('days', 10))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ - {currency}, –º–æ–¥–µ–ª—å - {model}, –¥–Ω–µ–π - {days}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    save_predictions(currency, model, days)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ model –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∑–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    predictions = Prediction.objects.filter(
        currency_code__currency_code=currency,  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–Ω–µ—à–Ω–µ–º—É –∫–ª—é—á—É
        model_name=model
    ).order_by('-date')[:days]

    return render(request, 'predictions.html', {
        'currency': currency,
        'model': model,
        'days': days,
        'predictions': predictions
    })
"""
def predictions_view(request):
    currency = request.GET.get('currency', 'USD').upper()
    model = request.GET.get('model', 'lstm')
    days = int(request.GET.get('days', 10))

    print(f"üì¢ –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è {currency}, –º–æ–¥–µ–ª—å: {model}, –¥–Ω–µ–π: {days}")

    try:
        save_predictions(currency, model, days)

        predictions_qs = Prediction.objects.filter(
            currency_code__currency_code=currency,
            model_name=model
        ).order_by('date')

        if not predictions_qs.exists():
            raise ValueError(f'–ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–ª—è {currency} ({model})')

        historical_qs = ExchangeRateNormalized.objects.filter(currency__currency_code=currency).order_by('date')
        df_hist = pd.DataFrame(list(historical_qs.values()))

        if df_hist.empty:
            raise ValueError(f'–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {currency}')

        df_hist['date'] = pd.to_datetime(df_hist['date'])
        df_hist = df_hist.sort_values("date")
        split_index = int(len(df_hist) * 0.8)
        df_train = df_hist.iloc[:split_index]
        df_test = df_hist.iloc[split_index:]

        model_function = MODEL_FUNCTIONS.get(model)
        if not model_function:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

        result = model_function(currency, days)

        if not result or 'test_result' not in result or 'future' not in result:
            raise ValueError(f'–ú–æ–¥–µ–ª—å "{model}" –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')

        full_chart_data = {
            "train_dates": df_train["date"].dt.strftime('%Y-%m-%d').tolist(),
            "train_values": df_train["rate_value"].tolist(),
            "test_dates": result["test_result"]["dates"],
            "test_values": result["test_result"]["y_true"],
            "predicted_values": result["test_result"]["y_pred"],
            "future_dates": result["future"].index.strftime('%Y-%m-%d').tolist(),
            "future_values": result["future"].tolist(),
        }

        def convert_decimal(obj):
            if isinstance(obj, decimal.Decimal):
                return float(obj)
            raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

        return render(request, 'predictions.html', {
            'currency': currency,
            'model': model,
            'days': days,
            'predictions': predictions_qs,
            'full_chart_data': json.dumps(full_chart_data, default=convert_decimal),
            'metrics': result["test_result"]["metrics"],
        })

    except Exception as e:
        return render(request, 'predictions.html', {
            'currency': currency,
            'model': model,
            'days': days,
            'error': f'‚ùå {str(e)}'
        })